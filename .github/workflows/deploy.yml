# https://medium.com/devops-techable/build-docker-image-with-github-actions-and-push-it-to-amazon-ecr-d4e739472284

name: Deploy to ECR

on:
  push:
    branches:
     - 'master'

env:
  service_name: thisper
  url: 'https://thisper.levantine.io'

jobs:
  run_terraform:
    name: Run Terraform Templates
    runs-on: ubuntu-latest
    steps:
      - name: Refresh Terraform
        id: terraform_refresh
        run: |
          data="{\"auth_usr\": \"github\", \"auth_key\": \"${{ secrets.JENKINS_AUTH_KEY }}\", \"service_name\": \"${{ env.service_name }}\"}"
          header='Content-Type: application/json'
          job_id=$(curl --request POST --location "${{ env.url }}/run_terraform" --header ${header} --data ${data} --silent)
          echo "Job ID: ${job_id}"

      - name: Wait for Terraform to complete
        run: |
          timeout=600  # Timeout in seconds (e.g., 10 minutes)
          start_time=$(date +%s)
          
          poll_url="${{ env.url }}/poll_terraform_job_status"
          data="{\"auth_usr\": \"github\", \"auth_key\": \"${{ secrets.JENKINS_AUTH_KEY }}\", \"service_name\": \"${{ env.service_name }}\", \"job_id\": \"${job_id}\"}"
          rc_params="-w \"%{http_code}\" -o /dev/null"
          header ='Content-Type: application/json'
          
          while true; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            if [[ $elapsed_time -ge $timeout ]]; then
              echo "Timeout reached. Job didn't finish within the specified time."
              exit 1
            fi
          
            rc=$(curl --request GET --location "${poll_url}" --header ${header} --data ${data} ${rc_params} --silent)
            if [[ $rc -eq 202 ]]; then
              echo "Job in progress..."
            elif [[ $rc -eq 200 ]]; then
              echo "Job completed successfully, outputting logs..."
              curl --request GET --location "${poll_url}" --header ${header} --data ${data} --silent"
              break
            else
              echo "Job failed. Check Jenkins logs for more information."
              curl --request GET --location "${poll_url}" --header ${header} --data ${data} --silent"
              exit 1
            fi


  build_and_push_container:
    name: Build and Push Docker Container to ECR
    needs: run_terraform
    runs-on: ubuntu-latest
    steps:
     - name: Check out code
       uses: actions/checkout@v2

     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
         aws-region: us-west-2

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1

     - name: Build, tag, and push image to Amazon ECR
       env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         ECR_REPOSITORY: thisper
         IMAGE_TAG: thisper-image-${{github.run_number}}
       run: |
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy_container:
    name: Deploy Container
    runs-on: ubuntu-latest
    needs: build_and_push_container
    steps:
      - name: Deploy Container
        id: deploy_container
        run: |
          job_id=$(curl --location --request POST "${{ env.url }}/deploy_container" --header 'Content-Type: application/json' --data "{\"auth_usr\": \"github\", \"auth_key\": \"${{ secrets.JENKINS_AUTH_KEY }}\", \"service_name\": \"${{ env.service_name }}\"}")

      - name: Wait for Terraform to complete
        run: |
          timeout=600  # Timeout in seconds (e.g., 10 minutes)
          start_time=$(date +%s)
          
          poll_url="${{ env.url }}/deploy_container"
          data="{\"auth_usr\": \"github\", \"auth_key\": \"${{ secrets.JENKINS_AUTH_KEY }}\", \"service_name\": \"${{ env.service_name }}\", \"job_id\": \"${job_id}\"}"
          rc_params="-w \"%{http_code}\" -o /dev/null"
          header ='Content-Type: application/json'
          
          while true; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            if [[ $elapsed_time -ge $timeout ]]; then
              echo "Timeout reached. Job didn't finish within the specified time."
              exit 1
            fi
          
            rc=$(curl --request GET --location "${poll_url}" --header ${header} --data ${data} ${rc_params} --silent)
            if [[ $rc -eq 202 ]]; then
              echo "Job in progress..."
            elif [[ $rc -eq 200 ]]; then
              echo "Job completed successfully, outputting logs..."
              curl --request GET --location "${poll_url}" --header ${header} --data ${data} --silent"
              break
            else
              echo "Job failed. Check Jenkins logs for more information."
              curl --request GET --location "${poll_url}" --header ${header} --data ${data} --silent"
              exit 1
            fi